<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
  <algorithms>

    <algorithm id="ESPSO" class="niching.NichingAlgorithm">
      <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100000">
        <predicate class="stoppingcondition.Maximum"/>
        <measurement class="measurement.single.ParticlePositionUpdates"/>
      </addStoppingCondition>

      <mainSwarm class="pso.PSO">
        <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
          <entityType class="pso.particle.StandardParticle">
            <behaviour class="pso.behaviour.StandardParticleBehaviour">
              <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.05"/>
                <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.05"/>
                <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.729"/>
              </velocityProvider>
              <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundaryConstraint"/>
            </behaviour>
            <velocityInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy"/>
          </entityType>
          <entityNumber value="100"/>
        </initialisationStrategy>

        <iterationStrategy class="pso.iterationstrategies.SpeciationIterationStrategy">
          <neighbourhoodSize class="controlparameter.ConstantControlParameter" parameter="100"/>
          <radius class="controlparameter.ConstantControlParameter" parameter="3"/>
        </iterationStrategy>
      </mainSwarm>

      <nicheCreator class="niching.creation.NeighbourhoodCreationStrategy">
        <swarmType class="pso.PSO">
          <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy"/>
        </swarmType>

        <swarmBehavior class="pso.behaviour.StandardParticleBehaviour">
          <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.05"/>
            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.05"/>
            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.729"/>
          </velocityProvider>
          <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary"/>
        </swarmBehavior>

        <m class="controlparameter.ConstantControlParameter" parameter="8"/>
        <r class="controlparameter.ConstantControlParameter" parameter="3"/>
        <delta class="controlparameter.ConstantControlParameter" parameter="2"/>
      </nicheCreator>

      <nicheDetector class="niching.creation.PBestStagnatedNicheDetection">
        <s class="controlparameter.ConstantControlParameter" parameter="3"/>
      </nicheDetector>

      <mainSwarmCreationMerger class="niching.merging.SingleSwarmMergeStrategy"/>

      <subSwarmIterator class="niching.iterators.AllSwarmsIterator">
        <iterator class="niching.iterators.SingleNicheIteration"/>
      </subSwarmIterator>

      <mainSwarmIterator class="niching.iterators.SingleNicheIteration"/>

      <iterationStrategy class="niching.iterationstrategies.ESPSOIterationStrategy"/>
    </algorithm>



    <algorithm id="speciationPSO" class="pso.PSO">
      <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="25000">
        <predicate class="stoppingcondition.Maximum"/>
        <measurement class="measurement.single.ParticlePositionUpdates"/>
      </addStoppingCondition>

      <iterationStrategy class="pso.iterationstrategies.SpeciationIterationStrategy">
        <neighbourhoodSize class="controlparameter.ConstantControlParameter" parameter="20"/>
        <radius class="controlparameter.ConstantControlParameter" parameter="0.1"/>
      </iterationStrategy>
    </algorithm>

    <algorithm id="speciation" class="pso.PSO">
      <neighbourhood class="entity.topologies.SpeciationNeighbourhood">
	    <neighbourhoodSize class="controlparameter.ConstantControlParameter" parameter="30"/>
        <radius class="controlparameter.ConstantControlParameter" parameter="0.1"/>
      </neighbourhood>
      <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
    </algorithm>

    <algorithm id="speciationWithRedundantParticleReinitialisation" class="pso.PSO">
      <iterationStrategy class="niching.iterationstrategies.EnhancedSpeciation"/>
      <neighbourhood class="entity.topologies.SpeciationNeighbourhood">
	    <neighbourhoodSize class="controlparameter.ConstantControlParameter" parameter="30"/>
        <radius class="controlparameter.ConstantControlParameter" parameter="0.1"/>
      </neighbourhood>
      <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
    </algorithm>
  </algorithms>

  <problems>
    <problem id="f1" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
      <objective class="problem.objective.Maximise"/>
      <function class="functions.continuous.unconstrained.EqualMaxima"/>
    </problem>
    <problem id="f2" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
      <objective class="problem.objective.Maximise"/>
      <function class="functions.continuous.unconstrained.EvenDecreasingMaxima"/>
    </problem>
    <problem id="f3" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
      <objective class="problem.objective.Maximise"/>
      <function class="functions.continuous.unconstrained.UnevenEqualMaxima"/>
    </problem>
    <problem id="f4" class="problem.FunctionOptimisationProblem" domain="R(0.0:1.0)">
      <objective class="problem.objective.Maximise"/>
      <function class="functions.continuous.unconstrained.UnevenDecreasingMaxima"/>
    </problem>
    <problem id="f5" class="problem.FunctionOptimisationProblem" domain="R(-5.0:5.0)^2">
      <objective class="problem.objective.Maximise"/>
      <function class="functions.continuous.unconstrained.ModifiedHimmelblau"/>
    </problem>
    <problem id="f6" class="problem.FunctionOptimisationProblem" domain="R(-5.0:5.0)^30">
      <function class="functions.continuous.unconstrained.Vincent"/>
    </problem>
  </problems>

  <measurements id="fitness" class="simulator.MeasurementSuite" resolution="10">
    <addMeasurement class="measurement.multiple.MultipleSolutions"/>
    <addMeasurement class="measurement.multiple.MultipleFitness"/>
    <addMeasurement class="measurement.single.SwarmSize"/>
  </measurements>

  <simulations>
    <simulation samples="1">
      <algorithm idref="speciationPSO"/>
      <problem idref="f5"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f1.txt"/>
    </simulation>
    <!--simulation samples="1">
      <algorithm idref="speciationPSO"/>
      <problem idref="f2"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f2.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciation"/>
      <problem idref="f3"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f3.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciation"/>
      <problem idref="f4"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f4.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciation"/>
      <problem idref="f5"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f5.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciation"/>
      <problem idref="f6"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/speciation-f6.txt"/>
    </simulation>

    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f1"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f1.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f2"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f2.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f3"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f3.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f4"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f4.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f5"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f5.txt"/>
    </simulation>
    <simulation samples="1">
      <algorithm idref="speciationWithRedundantParticleReinitialisation"/>
      <problem idref="f6"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f6.txt"/>
    </simulation-->

    <simulation samples="1">
      <algorithm idref="ESPSO"/>
      <problem idref="f5"/>
      <measurements idref="fitness" />
      <output format="TXT" file="data/enhanced-speciation-f1.txt"/>
    </simulation>
  </simulations>
</simulator>
