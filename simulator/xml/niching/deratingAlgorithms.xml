<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="deratingNichePSO" class="niching.NichingAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="25000">
                <predicate class="stoppingcondition.Maximum"/>
                <measurement class="measurement.single.ParticlePositionUpdates"/>
            </addStoppingCondition>

            <!-- need a regular pso -->
            <mainSwarm class="pso.PSO">
                <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="0">
                    <predicate class="stoppingcondition.Minimum"/>
                    <measurement class="measurement.single.SwarmSize"/>
                </addStoppingCondition>
                <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000">
                    <predicate class="stoppingcondition.Maximum"/>
                    <measurement class="measurement.generic.Iterations"/>
                </addStoppingCondition>

                <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                    <entityType class="pso.particle.StandardParticle">
                        <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                        </velocityProvider>
                        <velocityInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy"/>
                    </entityType>
                    <entityNumber value="50"/>
                </initialisationStrategy>

                <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                    <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundary"/>
                </iterationStrategy>
            </mainSwarm>

            <!-- Set the subswarm type and behavior here -->
            <nicheCreator class="niching.creation.ClosestNeighbourNicheCreationStrategy">
                <swarmType class="pso.PSO">
                    <addStoppingCondition class="stoppingcondition.OptimiserStalled"/>
                    <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                        <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundary"/>
                    </iterationStrategy>
                </swarmType>

                <swarmBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider">
                        <rho class="controlparameter.ConstantControlParameter" parameter="0.02"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                            <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.7" finalValue="0.2"/>
                        </delegate>
                    </velocityProvider>
                </swarmBehavior>
            </nicheCreator>

            <nicheDetector class="niching.creation.MaintainedFitnessNicheDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-3"/>
                <stationaryCounter class="controlparameter.ConstantControlParameter" parameter="3.0"/>
            </nicheDetector>

            <mergeDetector class="niching.merging.detection.RadiusOverlapMergeDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-12"/>
            </mergeDetector>

            <absorptionDetector class="niching.merging.detection.RadiusOverlapMergeDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-12"/>
            </absorptionDetector>

            <mainSwarmMerger class="niching.merging.SingleSwarmMergeStrategy"/>
            <mainSwarmAbsorber class="niching.merging.SingleSwarmMergeStrategy"/>
            <mainSwarmCreationMerger class="niching.merging.SingleSwarmMergeStrategy"/>

            <subSwarmMerger class="niching.merging.StandardMergeStrategy"/>
            <subSwarmAbsorber class="niching.merging.StandardMergeStrategy"/>

            <subSwarmIterator class="niching.iterators.AllSwarmsIterator">
                <iterator class="niching.iterators.IfNotFinishedSingleNicheIteration"/>
            </subSwarmIterator>

            <mainSwarmIterator class="niching.iterators.SingleNicheIteration"/>

            <iterationStrategy class="niching.iterationstrategies.DeratingNichePSO"/>
        </algorithm>

        <algorithm id="SNT-PSO" class="niching.SequentialNichingTechnique">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10"/>

            <algorithm class="pso.PSO">
                <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="500"/>
            </algorithm>
        </algorithm>

        <algorithm id="SNT-GA" class="niching.SequentialNichingTechnique">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10"/>

            <algorithm class="ec.EC">
                <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="500"/>
            </algorithm>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="f1" class="problem.DeratingOptimisationProblem" domain="R(0:1)^5">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.EqualMinima"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f2" class="problem.DeratingOptimisationProblem" domain="R(1:2.5)">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.EvenDecreasingMinima"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f3" class="problem.DeratingOptimisationProblem" domain="R(0:1)">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.UnevenEqualMinima"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f4" class="problem.DeratingOptimisationProblem" domain="R(1:5)">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.UnevenDecreasingMinima"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f5" class="problem.DeratingOptimisationProblem" domain="R(-6:6)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedHimmelblau"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f6" class="problem.DeratingOptimisationProblem" domain="R(-28:28)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Griewank"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f7" class="problem.DeratingOptimisationProblem" domain="R(-1.5:1.5)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Rastrigin"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f8" class="problem.DeratingOptimisationProblem" domain="R(-1.9:1.9)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedSixHumpCamelBack"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f9" class="problem.DeratingOptimisationProblem" domain="R(-10:10)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedShubert"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f10" class="problem.DeratingOptimisationProblem" domain="R(-0.25:10)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedVincent"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f11" class="problem.DeratingOptimisationProblem" domain="R(0:10)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Branin"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f12" class="problem.DeratingOptimisationProblem" domain="R(-500:500)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedSchwefel"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f13" class="problem.DeratingOptimisationProblem" domain="R(-30:30)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Ackley"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f14" class="problem.DeratingOptimisationProblem" domain="R(0:3.5)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Michalewicz"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f15" class="problem.DeratingOptimisationProblem" domain="R(-2:2)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.UrsemF1"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f16" class="problem.DeratingOptimisationProblem" domain="R(-2:2)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.InvertedUrsemF3"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f17" class="problem.DeratingOptimisationProblem" domain="R(-5:5)^2">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Bukin6"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f18" class="problem.DeratingOptimisationProblem" domain="R(-512:512)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.EggHolder"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f19" class="problem.DeratingOptimisationProblem" domain="R(-5:5)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Rosenbrock"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f20" class="problem.DeratingOptimisationProblem" domain="R(-11:11)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.PenHolder"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f21" class="problem.DeratingOptimisationProblem" domain="R(-512:512)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Rana"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
        
        <problem id="f22" class="problem.DeratingOptimisationProblem" domain="R(-11:11)^3">
            <objective class="problem.objective.Minimise"/>
            <function class="functions.continuous.unconstrained.Pathological"/>
            <deratingFunction class="functions.continuous.derating.PowerDeratingFunction">
                <radius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                <alpha class="controlparameter.ConstantControlParameter" parameter="0.8"/>
            </deratingFunction>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.ParticlePositionUpdates"/>
        <addMeasurement class="measurement.multiple.SumGradientAverageAndInvertedNichesNumber"/>
        <addMeasurement class="measurement.single.SwarmSize"/>
        <addMeasurement class="measurement.single.LocalNiches">
            <nicheRadius class="controlparameter.ConstantControlParameter" parameter="0.01"/>
        </addMeasurement>
        <addMeasurement class="measurement.multiple.CompositeMeasurement">
            <addMeasurement class="measurement.single.SwarmSize"/>
            <addMeasurement class="measurement.single.Solution"/>
            <addMeasurement class="measurement.single.Fitness"/>
            <addMeasurement class="measurement.single.GradientVector"/>
            <addMeasurement class="measurement.single.GradientVectorLength"/>
        </addMeasurement>
    </measurements>

    <simulations>
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f1.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f2"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f2.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f3"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f3.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f4"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f4.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f5.txt"/>
        </simulation>

        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f6"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f6.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f7"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f7.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f8"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f8.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f9"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f9.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f10"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f10.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f11"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f11.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f12"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f12.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f13"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f13.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f14"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f14.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f15"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f15.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f16"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f16.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f17"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f17.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f18"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f18.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f19"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f19.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f20"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f20.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f21"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f21.txt"/>
        </simulation>
        
        <simulation samples="1">
            <algorithm idref="deratingNichePSO"/>
            <problem idref="f22"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/deratingNichePSO-f22.txt"/>
        </simulation>
    </simulations>
</simulator>
